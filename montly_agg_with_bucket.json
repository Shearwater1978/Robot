[
    {
        "apiVersion": "influxdata.com/v2alpha1",
        "kind": "Bucket",
        "metadata": {
            "name": "cranky-aggmonth-458001"
        },
        "spec": {
            "name": "default_agg_month"
        }
    },
    {
        "apiVersion": "influxdata.com/v2alpha1",
        "kind": "Task",
        "metadata": {
            "name": "cranky-task-458001"
        },
        "spec": {
            "cron": "0 0 1 * *",
            "name": "monthly_agg",
            "query": "\nimport \"influxdata/influxdb/schema\" \nimport \"experimental\" import \"date\"\n\nimport \"influxdata/influxdb/secrets\"\n\noption org = secrets.get(key: \"org\")\n\ngetOrDefault = (f, d) => if exists f then f else d\n\nnow_time = now()\n\nfirst_day_current_month = date.truncate(t: now_time, unit: 1mo)\n\nstart_time = experimental.addDuration(d: -1mo, to: first_day_current_month) \n\nend_time = experimental.addDuration(d: -1s, to: first_day_current_month)\n\ntoBucket_monthly = \"default_agg_month\"\n\nproject_api_data =\n    from(bucket: \"default_agg_stats\")\n        |> range(start: start_time, stop: end_time)\n        |> filter(fn: (r) => r._field == \"request_count\" or r._field == \"price\")\n        |> filter(fn: (r) => r[\"project_id\"] != \"\")\n        |> schema.fieldsAsCols()\n        |> group()\n\nmonthly_api_data =\n    project_api_data\n        |> map(\n            fn: (r) =>\n                ({r with month: date.truncate(t: r._time, unit: 1mo),\n                        // Truncate time to the month\n\n                }),\n        )\n        |> group(columns: [\"month\", \"project_id\"])\n        // Group by month and user_hash\n        |> reduce(\n            fn: (r, accumulator) =>\n                ({\n                    request_count: getOrDefault(f: r.request_count, d: 0) + accumulator.request_count,\n                    price: getOrDefault(f: r.price, d: 0.0) + accumulator.price,\n                }),\n            identity: {request_count: 0, price: 0.0},\n        )\n\nmonthly_model_data =\n    project_api_data\n        |> map(\n            fn: (r) =>\n                ({r with month: date.truncate(t: r._time, unit: 1mo),\n                        // Truncate time to the month\n\n                }),\n        )\n        |> group(columns: [\"month\", \"model\"])\n        // Group by month and user_hash\n        |> reduce(\n            fn: (r, accumulator) =>\n                ({\n                    request_count: getOrDefault(f: r.request_count, d: 0) + accumulator.request_count,\n                    price: getOrDefault(f: r.price, d: 0.0) + accumulator.price,\n                }),\n            identity: {request_count: 0, price: 0.0},\n        )\n\ntotal_api_cost =\n    monthly_api_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> sum(column: \"price\")\n        // Sum all user costs per month\n        |> rename(columns: {price: \"Total_Cost_Per_Api\"})\n\navg_api_cost =\n    monthly_api_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> mean(column: \"price\")\n        // Compute the average cost per user\n        |> rename(columns: {price: \"Avg_Cost_Per_Api\"})\n\nunique_api =\n    monthly_api_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> count(column: \"project_id\")\n        // Compute the average cost per user\n        |> rename(columns: {project_id: \"Active_Apis\"})\n\ntotal_api_request =\n    monthly_api_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> sum(column: \"request_count\")\n        // Compute the average cost per user\n        |> rename(columns: {request_count: \"Total_RC_Per_Api\"})\n\navg_api_request =\n    monthly_api_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> mean(column: \"request_count\")\n        // Compute the average cost per user\n        |> rename(columns: {request_count: \"Avg_RC_Per_Api\"})\n\ntotal_model_cost =\n    monthly_model_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> sum(column: \"price\")\n        // Sum all user costs per month\n        |> rename(columns: {price: \"Total_Cost_Per_Model\"})\n\navg_model_cost =\n    monthly_model_data\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> mean(column: \"price\")\n        // Compute the average cost per user\n        |> rename(columns: {price: \"Avg_Cost_Per_Model\"})\n\nkpi_data =\n    from(bucket: \"default_agg_kpi\")\n        |> range(start: start_time, stop: end_time)\n        |> filter(fn: (r) => r[\"_measurement\"] == \"analytics\")\n        |> filter(fn: (r) => r[\"user_hash\"] != \"undefined\")\n        |> schema.fieldsAsCols()\n        |> group()\n\nuser_cost_per_month =\n    kpi_data\n        |> map(\n            fn: (r) =>\n                ({r with month: date.truncate(t: r._time, unit: 1mo),\n                        // Truncate time to the month\n\n                }),\n        )\n        |> group(columns: [\"month\", \"user_hash\"])\n        // Group by month and user_hash\n        |> sum(column: \"cost\")\n\ntotal_user_cost =\n    user_cost_per_month\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> sum(column: \"cost\")\n        // Sum all user costs per month\n        |> rename(columns: {cost: \"total_user_cost\"})\n\navg_per_user_per_month =\n    user_cost_per_month\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> mean(column: \"cost\")\n        // Compute the average cost per user\n        |> rename(columns: {cost: \"Avg_Cost_Per_User\"})\n\nunique_user_per_month =\n    user_cost_per_month\n        |> group(columns: [\"month\"])\n        // Group by month only\n        |> count(column: \"user_hash\")\n        // Compute the average cost per user\n        |> rename(columns: {user_hash: \"Unique_Users\"})\n\nfinal_transformed =\n    union(\n        tables: [\n            total_user_cost\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"total_user_cost\",\n                            _value: float(v: r.total_user_cost),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            avg_per_user_per_month\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Avg_Cost_Per_User\",\n                            _value: float(v: r.Avg_Cost_Per_User),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            unique_user_per_month\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Unique_Users\",\n                            _value: float(v: r.Unique_Users),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            total_api_cost\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Total_Cost_Per_Api\",\n                            _value: float(v: r.Total_Cost_Per_Api),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            avg_api_cost\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Avg_Cost_Per_Api\",\n                            _value: float(v: r.Avg_Cost_Per_Api),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            unique_api\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Active_Apis\",\n                            _value: float(v: r.Active_Apis),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            total_api_request\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Total_RC_Per_Api\",\n                            _value: float(v: r.Total_RC_Per_Api),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            avg_api_request\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Avg_RC_Per_Api\",\n                            _value: float(v: r.Avg_RC_Per_Api),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            total_model_cost\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Total_Cost_Per_Model\",\n                            _value: float(v: r.Total_Cost_Per_Model),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n            avg_model_cost\n                |> rename(columns: {month: \"_time\"})\n                |> map(\n                    fn: (r) =>\n                        ({\n                            _time: r._time,\n                            _measurement: \"analytics\",\n                            _field: \"Avg_Cost_Per_Model\",\n                            _value: float(v: r.Avg_Cost_Per_Model),\n                        }),\n                )\n                |> keep(columns: [\"_time\", \"_measurement\", \"_field\", \"_value\"]),\n        ],\n    )\n\nfinal_transformed\n    |> group()\n    |> to(bucket: toBucket_monthly, org: org)"
        }
    }
]
